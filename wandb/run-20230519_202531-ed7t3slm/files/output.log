tensor([[-0.2740,  0.4460, -0.0369],
        [ 0.4925,  0.2796, -0.2530],
        [-0.3600, -0.3486,  0.2108],
        [ 0.1066,  0.2511, -0.1353],
        [-0.3995, -0.0015, -0.3400],
        [ 0.2224, -0.4032,  0.2103],
        [-0.4877,  0.1623, -0.3474],
        [ 0.0697, -0.1394,  0.3423],
        [-0.0243,  0.3000, -0.2541],
        [-0.3484,  0.2224,  0.2555],
        [ 0.0028,  0.1929,  0.1230],
        [ 0.3819, -0.3926, -0.2642],
        [-0.2407,  0.1854, -0.3859],
        [-0.2616,  0.2015, -0.1579],
        [ 0.1236,  0.0829, -0.1532],
        [-0.2594,  0.4548,  0.0785],
        [ 0.4663,  0.2486,  0.3104],
        [ 0.4237,  0.1785, -0.2286],
        [ 0.2649,  0.4471, -0.1280],
        [ 0.2061, -0.0492, -0.1858],
        [-0.4647, -0.2397,  0.1077],
        [ 0.4419, -0.3525, -0.0809],
        [-0.0800, -0.1265,  0.2857],
        [-0.0961, -0.1152,  0.3893],
        [ 0.1444, -0.1307,  0.4965],
        [ 0.4589,  0.2806,  0.1641],
        [ 0.1525, -0.4205,  0.3067],
        [ 0.4448, -0.3633,  0.1303],
        [ 0.4445, -0.4648,  0.3416],
        [-0.0600, -0.1476, -0.2625]], device='cuda:0',
       grad_fn=<ToCopyBackward0>)
{'_metadata': ContainerMetadata(ref_type=typing.Any, object_type=<class 'dict'>, optional=True, key='config', flags={}, flags_root=False, resolver_cache=defaultdict(<class 'dict'>, {}), key_type=typing.Any, element_type=typing.Any), '_parent': {'name': 'ECTCNNModel', 'config': {'bump_steps': 20, 'num_thetas': 30, 'num_features': 3, 'R': 1.5, 'scale': 200, 'num_classes': 10}}, '_flags_cache': {'struct': None}, '_content': {'bump_steps': 20, 'num_thetas': 30, 'num_features': 3, 'R': 1.5, 'scale': 200, 'num_classes': 10}}
Traceback (most recent call last):
  File "/home/larbs/projects/desct/main.py", line 75, in <module>
    main()
  File "/home/larbs/projects/desct/main.py", line 44, in main
    model = load_model(
            ^^^^^^^^^^^
  File "/home/larbs/projects/desct/models/__init__.py", line 30, in load_model
    return model(config)
           ^^^^^^^^^^^^^
  File "/home/larbs/projects/desct/models/ect_model.py", line 61, in __init__
    self.ectlayer = GEctLayer(config)
                   ^^^^^^^^^^^^^^^^^
  File "/home/larbs/projects/desct/models/layers/layers.py", line 26, in __init__
    geotorch.sphere(self,"v")
  File "/home/larbs/.local/lib/python3.11/site-packages/geotorch/constraints.py", line 121, in sphere
    return _register_manifold(module, tensor_name, cls, radius)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/larbs/.local/lib/python3.11/site-packages/geotorch/constraints.py", line 31, in _register_manifold
    P.register_parametrization(module, tensor_name, M, unsafe=True)
  File "/home/larbs/.local/lib/python3.11/site-packages/geotorch/parametrize.py", line 570, in register_parametrization
    raise ValueError(
ValueError: Module 'GEctLayer(_metadata=ContainerMetadata(ref_type=typing.Any, object_type=<class 'dict'>, optional=True, key='config', flags={}, flags_root=False, resolver_cache=defaultdict(<class 'dict'>, {}), key_type=typing.Any, element_type=typing.Any), _parent={'name': 'ECTCNNModel', 'config': {'bump_steps': 20, 'num_thetas': 30, 'num_features': 3, 'R': 1.5, 'scale': 200, 'num_classes': 10}}, _flags_cache={'struct': None}, _content={'bump_steps': 20, 'num_thetas': 30, 'num_features': 3, 'R': 1.5, 'scale': 200, 'num_classes': 10})' does not have a parameter, a buffer, or a parametrized element with name 'v'